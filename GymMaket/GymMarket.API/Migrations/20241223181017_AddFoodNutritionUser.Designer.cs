// <auto-generated />
using System;
using GymMarket.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GymMarket.API.Migrations
{
    [DbContext(typeof(GymMarketContext))]
    [Migration("20241223181017_AddFoodNutritionUser")]
    partial class AddFoodNutritionUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GymMarket.API.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("GymMarket.API.Models.Conversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecieveId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RecieveId");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("GymMarket.API.Models.ConversationParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConversationId")
                        .HasColumnType("int");

                    b.Property<bool>("HasNewMessage")
                        .HasColumnType("bit");

                    b.Property<string>("LastMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ConversationParticipants");
                });

            modelBuilder.Entity("GymMarket.API.Models.Course", b =>
                {
                    b.Property<string>("CourseId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Course_ID");

                    b.Property<decimal?>("AdditionalPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10, 2)")
                        .HasDefaultValue(0.00m)
                        .HasColumnName("Additional_Price");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("End_Date");

                    b.Property<int?>("MaxParticipants")
                        .HasColumnType("int")
                        .HasColumnName("Max_Participants");

                    b.Property<decimal?>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10, 2)")
                        .HasDefaultValue(0.00m);

                    b.Property<decimal?>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(3, 2)")
                        .HasDefaultValue(0.00m);

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Start_Date");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TrainerId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Trainer_ID");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CourseId")
                        .HasName("PK__Courses__37E005FB71A00E15");

                    b.HasIndex("TrainerId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("GymMarket.API.Models.CourseOption", b =>
                {
                    b.Property<string>("OptionId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Option_ID");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OptionName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Option_Name");

                    b.Property<decimal?>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10, 2)")
                        .HasDefaultValue(0.00m);

                    b.HasKey("OptionId")
                        .HasName("PK__Course_O__3260905ED3772281");

                    b.ToTable("Course_Options", (string)null);
                });

            modelBuilder.Entity("GymMarket.API.Models.CourseRating", b =>
                {
                    b.Property<string>("RatingId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Rating_ID");

                    b.Property<string>("CourseId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Course_ID");

                    b.Property<string>("CourseOptionOptionId")
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("RatingValue")
                        .HasColumnType("decimal(3, 2)")
                        .HasColumnName("Rating_Value");

                    b.Property<string>("ReviewComment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Review_Comment");

                    b.Property<string>("StudentId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Student_ID");

                    b.HasKey("RatingId")
                        .HasName("PK__Course_R__BE48C825152098C5");

                    b.HasIndex("CourseId");

                    b.HasIndex("CourseOptionOptionId");

                    b.HasIndex("StudentId");

                    b.ToTable("Course_Ratings", (string)null);
                });

            modelBuilder.Entity("GymMarket.API.Models.CourseRegistration", b =>
                {
                    b.Property<string>("RegistrationId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Registration_ID");

                    b.Property<decimal?>("AdditionalFeaturesPayment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10, 2)")
                        .HasDefaultValue(0.00m)
                        .HasColumnName("Additional_Features_Payment");

                    b.Property<string>("ContractAgreement")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Contract_Agreement");

                    b.Property<string>("CourseId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Course_ID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Created_At")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal?>("InitialPayment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10, 2)")
                        .HasDefaultValue(0.00m)
                        .HasColumnName("Initial_Payment");

                    b.Property<string>("Mode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PaymentStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Payment_Status");

                    b.Property<string>("RegistrationType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Registration_Type");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StudentId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Student_ID");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Updated_At");

                    b.HasKey("RegistrationId")
                        .HasName("PK__Course_R__80BC7A177D892242");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Course_Registration", (string)null);
                });

            modelBuilder.Entity("GymMarket.API.Models.CourseRegistrationOption", b =>
                {
                    b.Property<string>("RegistrationOptionId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Registration_Option_ID");

                    b.Property<string>("OptionId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Option_ID");

                    b.Property<string>("RegistrationId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Registration_ID");

                    b.HasKey("RegistrationOptionId")
                        .HasName("PK__Course_R__69107FA1C5F3CCD3");

                    b.HasIndex("OptionId");

                    b.HasIndex("RegistrationId");

                    b.ToTable("Course_Registration_Options", (string)null);
                });

            modelBuilder.Entity("GymMarket.API.Models.FileCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObjectId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FileCourses");
                });

            modelBuilder.Entity("GymMarket.API.Models.FoodNutrition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("CaloricValue")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FoodNutritions");
                });

            modelBuilder.Entity("GymMarket.API.Models.FoodNutritionUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("CaloricValue")
                        .HasColumnType("float");

                    b.Property<string>("FoodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("FoodNutritionUsers");
                });

            modelBuilder.Entity("GymMarket.API.Models.HealthDatum", b =>
                {
                    b.Property<string>("HealthDataId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Health_Data_ID");

                    b.Property<string>("BodyImage")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Body_Image");

                    b.Property<string>("CourseId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Course_ID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Created_At")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ProgressNotes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Progress_Notes");

                    b.Property<string>("StudentId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Student_ID");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Updated_At");

                    b.HasKey("HealthDataId")
                        .HasName("PK__Health_D__AC2A295B64A6A474");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Health_Data", (string)null);
                });

            modelBuilder.Entity("GymMarket.API.Models.HealthIndicator", b =>
                {
                    b.Property<string>("IndicatorId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Indicator_ID");

                    b.Property<string>("HealthDataId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Health_Data_ID");

                    b.Property<string>("IndicatorName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Indicator_Name");

                    b.Property<string>("IndicatorValue")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Indicator_Value");

                    b.Property<DateTime?>("MeasurementDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Measurement_Date")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("IndicatorId")
                        .HasName("PK__Health_I__7798E6A1AA3F762E");

                    b.HasIndex("HealthDataId");

                    b.ToTable("Health_Indicators", (string)null);
                });

            modelBuilder.Entity("GymMarket.API.Models.Lecture", b =>
                {
                    b.Property<string>("LectureId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Lecture_ID");

                    b.Property<string>("CourseId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Course_ID");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("LectureId")
                        .HasName("PK__Lectures__551CCF797A21E155");

                    b.HasIndex("CourseId");

                    b.ToTable("Lectures");
                });

            modelBuilder.Entity("GymMarket.API.Models.LectureMaterial", b =>
                {
                    b.Property<string>("MaterialId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Material_ID");

                    b.Property<string>("LectureId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Lecture_ID");

                    b.Property<string>("MaterialContent")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Material_Content");

                    b.Property<string>("MaterialType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Material_Type");

                    b.HasKey("MaterialId")
                        .HasName("PK__Lecture___3A09B0FD4BA27D50");

                    b.HasIndex("LectureId");

                    b.ToTable("Lecture_Materials", (string)null);
                });

            modelBuilder.Entity("GymMarket.API.Models.Message", b =>
                {
                    b.Property<string>("MessageId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Message_ID");

                    b.Property<string>("CourseId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Course_ID");

                    b.Property<string>("MessageContent")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Message_Content");

                    b.Property<string>("MessageType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Message_Type");

                    b.Property<string>("StudentId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Student_ID");

                    b.Property<DateTime?>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("TrainerId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Trainer_ID");

                    b.HasKey("MessageId")
                        .HasName("PK__Messages__F5A446E2FCEFE4A9");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TrainerId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("GymMarket.API.Models.Notification", b =>
                {
                    b.Property<string>("NotificationId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Notification_ID");

                    b.Property<string>("NotificationContent")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Notification_Content");

                    b.Property<string>("NotificationType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Notification_Type");

                    b.Property<string>("StudentId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Student_ID");

                    b.Property<DateTime?>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("NotificationId")
                        .HasName("PK__Notifica__8C1160B56820950B");

                    b.HasIndex("StudentId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("GymMarket.API.Models.Payment", b =>
                {
                    b.Property<string>("PaymentId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Payment_ID");

                    b.Property<string>("CourseId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Course_ID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Created_At")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal?>("PaymentAmount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("Payment_Amount");

                    b.Property<DateTime?>("PaymentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Payment_Date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PaymentStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Payment_Status");

                    b.Property<string>("PaymentType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Payment_Type");

                    b.Property<string>("StudentId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Student_ID");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Updated_At");

                    b.HasKey("PaymentId")
                        .HasName("PK__Payments__DA6C7FE18EA85F75");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("GymMarket.API.Models.Student", b =>
                {
                    b.Property<string>("StudentId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Student_ID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Created_At")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HealthStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Health_Status");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Profile_Picture");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Updated_At");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StudentId")
                        .HasName("PK__Students__A2F4E9AC7CF53A74");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("GymMarket.API.Models.Trainer", b =>
                {
                    b.Property<string>("TrainerId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Trainer_ID");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Certification")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Created_At")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Profile_Picture");

                    b.Property<decimal?>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(3, 2)")
                        .HasDefaultValue(0.00m);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Updated_At");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TrainerId")
                        .HasName("PK__Trainers__8B0EB931432C150B");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Trainers");
                });

            modelBuilder.Entity("GymMarket.API.Models.UserMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConversationId")
                        .HasColumnType("int");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("UserMessages");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GymMarket.API.Models.Conversation", b =>
                {
                    b.HasOne("GymMarket.API.Models.AppUser", "Recieve")
                        .WithMany()
                        .HasForeignKey("RecieveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recieve");
                });

            modelBuilder.Entity("GymMarket.API.Models.Course", b =>
                {
                    b.HasOne("GymMarket.API.Models.Trainer", "Trainer")
                        .WithMany("Courses")
                        .HasForeignKey("TrainerId")
                        .HasConstraintName("FK_Courses_Trainer");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("GymMarket.API.Models.CourseRating", b =>
                {
                    b.HasOne("GymMarket.API.Models.Course", "Course")
                        .WithMany("CourseRatings")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_Course_Ratings_Course");

                    b.HasOne("GymMarket.API.Models.CourseOption", null)
                        .WithMany("CourseRatings")
                        .HasForeignKey("CourseOptionOptionId");

                    b.HasOne("GymMarket.API.Models.Student", "Student")
                        .WithMany("CourseRatings")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_Course_Ratings_Student");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("GymMarket.API.Models.CourseRegistration", b =>
                {
                    b.HasOne("GymMarket.API.Models.Course", "Course")
                        .WithMany("CourseRegistrations")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_Course_Registration_Course");

                    b.HasOne("GymMarket.API.Models.Student", "Student")
                        .WithMany("CourseRegistrations")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_Course_Registration_Student");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("GymMarket.API.Models.CourseRegistrationOption", b =>
                {
                    b.HasOne("GymMarket.API.Models.CourseOption", "Option")
                        .WithMany("CourseRegistrationOptions")
                        .HasForeignKey("OptionId")
                        .HasConstraintName("FK_Course_Registration_Options_Option");

                    b.HasOne("GymMarket.API.Models.CourseRegistration", "Registration")
                        .WithMany("CourseRegistrationOptions")
                        .HasForeignKey("RegistrationId")
                        .HasConstraintName("FK_Course_Registration_Options_Registration");

                    b.Navigation("Option");

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("GymMarket.API.Models.HealthDatum", b =>
                {
                    b.HasOne("GymMarket.API.Models.Course", "Course")
                        .WithMany("HealthData")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_Health_Data_Course");

                    b.HasOne("GymMarket.API.Models.Student", "Student")
                        .WithMany("HealthData")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_Health_Data_Student");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("GymMarket.API.Models.HealthIndicator", b =>
                {
                    b.HasOne("GymMarket.API.Models.HealthDatum", "HealthData")
                        .WithMany("HealthIndicators")
                        .HasForeignKey("HealthDataId")
                        .HasConstraintName("FK_Health_Indicators_HealthData");

                    b.Navigation("HealthData");
                });

            modelBuilder.Entity("GymMarket.API.Models.Lecture", b =>
                {
                    b.HasOne("GymMarket.API.Models.Course", "Course")
                        .WithMany("Lectures")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_Lectures_Course");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("GymMarket.API.Models.LectureMaterial", b =>
                {
                    b.HasOne("GymMarket.API.Models.Lecture", "Lecture")
                        .WithMany("LectureMaterials")
                        .HasForeignKey("LectureId")
                        .HasConstraintName("FK_Lecture_Materials_Lecture");

                    b.Navigation("Lecture");
                });

            modelBuilder.Entity("GymMarket.API.Models.Message", b =>
                {
                    b.HasOne("GymMarket.API.Models.Course", "Course")
                        .WithMany("Messages")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_Messages_Course");

                    b.HasOne("GymMarket.API.Models.Student", "Student")
                        .WithMany("Messages")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_Messages_Student");

                    b.HasOne("GymMarket.API.Models.Trainer", "Trainer")
                        .WithMany("Messages")
                        .HasForeignKey("TrainerId")
                        .HasConstraintName("FK_Messages_Trainer");

                    b.Navigation("Course");

                    b.Navigation("Student");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("GymMarket.API.Models.Notification", b =>
                {
                    b.HasOne("GymMarket.API.Models.Student", "Student")
                        .WithMany("Notifications")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_Notifications_Student");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("GymMarket.API.Models.Payment", b =>
                {
                    b.HasOne("GymMarket.API.Models.Course", "Course")
                        .WithMany("Payments")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_Payments_Course");

                    b.HasOne("GymMarket.API.Models.Student", "Student")
                        .WithMany("Payments")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_Payments_Student");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("GymMarket.API.Models.Student", b =>
                {
                    b.HasOne("GymMarket.API.Models.AppUser", "AppUser")
                        .WithOne("Student")
                        .HasForeignKey("GymMarket.API.Models.Student", "UserId")
                        .HasConstraintName("FK_Student_AppUser");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("GymMarket.API.Models.Trainer", b =>
                {
                    b.HasOne("GymMarket.API.Models.AppUser", "AppUser")
                        .WithOne("Trainer")
                        .HasForeignKey("GymMarket.API.Models.Trainer", "UserId")
                        .HasConstraintName("FK_Trainer_AppUser");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("GymMarket.API.Models.UserMessage", b =>
                {
                    b.HasOne("GymMarket.API.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GymMarket.API.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GymMarket.API.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymMarket.API.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GymMarket.API.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GymMarket.API.Models.AppUser", b =>
                {
                    b.Navigation("Student");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("GymMarket.API.Models.Course", b =>
                {
                    b.Navigation("CourseRatings");

                    b.Navigation("CourseRegistrations");

                    b.Navigation("HealthData");

                    b.Navigation("Lectures");

                    b.Navigation("Messages");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("GymMarket.API.Models.CourseOption", b =>
                {
                    b.Navigation("CourseRatings");

                    b.Navigation("CourseRegistrationOptions");
                });

            modelBuilder.Entity("GymMarket.API.Models.CourseRegistration", b =>
                {
                    b.Navigation("CourseRegistrationOptions");
                });

            modelBuilder.Entity("GymMarket.API.Models.HealthDatum", b =>
                {
                    b.Navigation("HealthIndicators");
                });

            modelBuilder.Entity("GymMarket.API.Models.Lecture", b =>
                {
                    b.Navigation("LectureMaterials");
                });

            modelBuilder.Entity("GymMarket.API.Models.Student", b =>
                {
                    b.Navigation("CourseRatings");

                    b.Navigation("CourseRegistrations");

                    b.Navigation("HealthData");

                    b.Navigation("Messages");

                    b.Navigation("Notifications");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("GymMarket.API.Models.Trainer", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
